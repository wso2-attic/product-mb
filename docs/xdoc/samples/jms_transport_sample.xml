<?xml version="1.0" encoding="iso-8859-1"?>
<!--
~ Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~ WSO2 Inc. licenses this file to you under the Apache License,
~ Version 2.0 (the "License"); you may not use this file except
~ in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing,
~ software distributed under the License is distributed on an
~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~ KIND, either express or implied. See the License for the
~ specific language governing permissions and limitations
~ under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <title>WSO2 MB Samples - JMS Transport Sample</title>
        <link href="../css/mb-docs.css" rel="stylesheet"/>
        <link href="../styles/dist-docs.css" rel="stylesheet" type="text/css"
              media="all"/>
    </head>

    <body>
        <p>[<a href="../docs_index.html">Documentation Index</a>]  </p>
        <h1>WSO2 MB - Samples :JMS Transport Sample</h1>
        <p>Apache AXIS2 support a JMS transport layer in addition to the existing HTTP transport. This allows Web
            service clients and servers to communicate via JMS queues and topics instead of HTTP connections.
            Both one-way and synchronous two-way requests are supported.</p>
        <p>The benefits of using JMS as an alternative to HTTP include the following:</p>
        <ul>
            <li>
                Request and response messages are sent by way of reliable messaging.
            </li>
            <li>One-way requests allow client and server to be more loosely-coupled (the server does not have to be
                active when the client sends the one-way request).
            </li>
            <li>One-way requests can be sent to multiple servers simultaneously through the use of a topic.
            </li>
        </ul>
        <p>If a web service is to be accessible on the JMS transport, then the corresponding WSDL document should include
            a JMS binding and a SOAP address which specifies a JMS endpoint URL string. A JMS binding is simply
            a <b>wsdl:binding </b> element which contains a <b
            >wsdlsoap:binding</b> element whose transport attribute ends in soap/jms,
            rather than the normal soap/http value. In addition to the JMS binding, a <b>wsdl:port</b> element which references
            the JMS binding should be included in the <b>wsdl:service</b> element within the WSDL document. This <b>wsdl:port</b> element
            should contain a <b>wsdlsoap:address</b> element whose location attribute specifies a JMS endpoint URL string.
        </p>
        <p>
            You also need to decide on the names and types of JMS objects that your application will use. For example,
            you must decide whether your web service will receive its requests from a queue or a topic. You also must
            decide whether to use a secure destination (queue or topic). Finally, you will need to decide on the names
            for your destination, connection factory, and listener port.   The following list provides an example of the
            names that might be used for the sample MessageReceiveService web service:
        </p>
        <table>
            <tr>
                <td>Queue</td>  <td>MessageReceiveService, JNDI name: MessageReceiveService</td>
            </tr>
            <tr>
                <td>QueueConnectionFactory</td> <td></td>
            </tr>
        </table>
        <h2>Creating A Simple Service</h2>
        <p>Following java class with its two operations are hosted in Axis2 server as a web service</p>
        <pre xml:space="preserve">
            /*
            *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
            *
            *  WSO2 Inc. licenses this file to you under the Apache License,
            *  Version 2.0 (the "License"); you may not use this file except
            *  in compliance with the License.
            *  You may obtain a copy of the License at
            *
            *    http://www.apache.org/licenses/LICENSE-2.0
            *
            * Unless required by applicable law or agreed to in writing,
            * software distributed under the License is distributed on an
            * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
            * KIND, either express or implied.  See the License for the
            * specific language governing permissions and limitations
            * under the License.
            */

            public class MessageReceiveService {
                public void receive(String message) {
                    System.out.println("Got the message ==> " + message);
                }
                public String echo(String message) {
                    System.out.println("Got the message ==> " + message);
                    return message;
                }
            }
        </pre>
        <p>As WSDL of the service following will be used. Note how JMS bindings are defined. receive operation is an
            "in only" operation having only input message. But echo is "in-out" operation which is having an output
            message as well as an input message.
        </p>

        <pre xml:space="preserve">
            &lt;wsdl:definitions xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:ns1=&quot;http://org.apache.axis2/xsd&quot; xmlns:ns=&quot;http://transport.sample.org&quot; xmlns:wsaw=&quot;http://www.w3.org/2006/05/addressing/wsdl&quot; xmlns:http=&quot;http://schemas.xmlsoap.org/wsdl/http/&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:mime=&quot;http://schemas.xmlsoap.org/wsdl/mime/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:soap12=&quot;http://schemas.xmlsoap.org/wsdl/soap12/&quot; targetNamespace=&quot;http://transport.sample.org&quot;&gt;
                &lt;wsdl:types&gt;
                    &lt;xs:schema attributeFormDefault=&quot;qualified&quot; elementFormDefault=&quot;unqualified&quot; targetNamespace=&quot;http://transport.sample.org&quot;&gt;
                        &lt;xs:element name=&quot;receive&quot;&gt;
                            &lt;xs:complexType&gt;
                                &lt;xs:sequence&gt;
                                    &lt;xs:element minOccurs=&quot;0&quot; name=&quot;message&quot; nillable=&quot;true&quot; type=&quot;xs:string&quot;/&gt;
                                &lt;/xs:sequence&gt;
                            &lt;/xs:complexType&gt;
                        &lt;/xs:element&gt;
                        &lt;xs:element name=&quot;echo&quot;&gt;
                            &lt;xs:complexType&gt;
                                &lt;xs:sequence&gt;
                                    &lt;xs:element minOccurs=&quot;0&quot; name=&quot;message&quot; nillable=&quot;true&quot; type=&quot;xs:string&quot;/&gt;
                                &lt;/xs:sequence&gt;
                            &lt;/xs:complexType&gt;
                        &lt;/xs:element&gt;
                        &lt;xs:element name=&quot;echoResponse&quot;&gt;
                            &lt;xs:complexType&gt;
                                &lt;xs:sequence&gt;
                                    &lt;xs:element minOccurs=&quot;0&quot; name=&quot;return&quot; nillable=&quot;true&quot; type=&quot;xs:string&quot;/&gt;
                                &lt;/xs:sequence&gt;
                            &lt;/xs:complexType&gt;
                        &lt;/xs:element&gt;
                    &lt;/xs:schema&gt;
                &lt;/wsdl:types&gt;
                &lt;wsdl:message name=&quot;echoRequest&quot;&gt;
                    &lt;wsdl:part name=&quot;parameters&quot; element=&quot;ns:echo&quot;/&gt;
                &lt;/wsdl:message&gt;
                &lt;wsdl:message name=&quot;echoResponse&quot;&gt;
                    &lt;wsdl:part name=&quot;parameters&quot; element=&quot;ns:echoResponse&quot;/&gt;
                &lt;/wsdl:message&gt;
                &lt;wsdl:message name=&quot;receiveRequest&quot;&gt;
                    &lt;wsdl:part name=&quot;parameters&quot; element=&quot;ns:receive&quot;/&gt;
                &lt;/wsdl:message&gt;
                &lt;wsdl:portType name=&quot;MessageReceiveServicePortType&quot;&gt;
                    &lt;wsdl:operation name=&quot;echo&quot;&gt;
                        &lt;wsdl:input message=&quot;ns:echoRequest&quot; wsaw:Action=&quot;urn:echo&quot;/&gt;
                        &lt;wsdl:output message=&quot;ns:echoResponse&quot; wsaw:Action=&quot;urn:echoResponse&quot;/&gt;
                    &lt;/wsdl:operation&gt;
                    &lt;wsdl:operation name=&quot;receive&quot;&gt;
                        &lt;wsdl:input message=&quot;ns:receiveRequest&quot; wsaw:Action=&quot;urn:receive&quot;/&gt;
                    &lt;/wsdl:operation&gt;
                &lt;/wsdl:portType&gt;
                &lt;wsdl:binding name=&quot;MessageReceiveServiceSoap11Binding&quot; type=&quot;ns:MessageReceiveServicePortType&quot;&gt;
                    &lt;soap:binding transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; style=&quot;document&quot;/&gt;
                    &lt;wsdl:operation name=&quot;echo&quot;&gt;
                        &lt;soap:operation soapAction=&quot;urn:echo&quot; style=&quot;document&quot;/&gt;
                        &lt;wsdl:input&gt;
                            &lt;soap:body use=&quot;literal&quot;/&gt;
                        &lt;/wsdl:input&gt;
                        &lt;wsdl:output&gt;
                            &lt;soap:body use=&quot;literal&quot;/&gt;
                        &lt;/wsdl:output&gt;
                    &lt;/wsdl:operation&gt;
                    &lt;wsdl:operation name=&quot;receive&quot;&gt;
                        &lt;soap:operation soapAction=&quot;urn:receive&quot; style=&quot;document&quot;/&gt;
                        &lt;wsdl:input&gt;
                            &lt;soap:body use=&quot;literal&quot;/&gt;
                        &lt;/wsdl:input&gt;
                    &lt;/wsdl:operation&gt;
                &lt;/wsdl:binding&gt;
                &lt;wsdl:binding name=&quot;MessageReceiveServiceSoap12Binding&quot; type=&quot;ns:MessageReceiveServicePortType&quot;&gt;
                    &lt;soap12:binding transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; style=&quot;document&quot;/&gt;
                    &lt;wsdl:operation name=&quot;echo&quot;&gt;
                        &lt;soap12:operation soapAction=&quot;urn:echo&quot; style=&quot;document&quot;/&gt;
                        &lt;wsdl:input&gt;
                            &lt;soap12:body use=&quot;literal&quot;/&gt;
                        &lt;/wsdl:input&gt;
                        &lt;wsdl:output&gt;
                            &lt;soap12:body use=&quot;literal&quot;/&gt;
                        &lt;/wsdl:output&gt;
                    &lt;/wsdl:operation&gt;
                    &lt;wsdl:operation name=&quot;receive&quot;&gt;
                        &lt;soap12:operation soapAction=&quot;urn:receive&quot; style=&quot;document&quot;/&gt;
                        &lt;wsdl:input&gt;
                            &lt;soap12:body use=&quot;literal&quot;/&gt;
                        &lt;/wsdl:input&gt;
                    &lt;/wsdl:operation&gt;
                &lt;/wsdl:binding&gt;
                &lt;wsdl:service name=&quot;MessageReceiveService&quot;&gt;
                    &lt;wsdl:port name=&quot;MessageReceiveServiceJmsSoap11Endpoint&quot; binding=&quot;ns:MessageReceiveServiceSoap11Binding&quot;&gt;
                        &lt;soap:address location=&quot;jms:/MessageReceiveService?transport.jms.DestinationType=queue&amp;amp;transport.jms.ContentTypeProperty=Content-Type&amp;amp;java.naming.provider.url=conf/jndi.properties&amp;amp;java.naming.factory.initial=org.wso2.andes.jndi.PropertiesFileInitialContextFactory&amp;amp;transport.jms.ConnectionFactoryType=queue&amp;amp;transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&quot;/&gt;
                    &lt;/wsdl:port&gt;
                    &lt;wsdl:port name=&quot;MessageReceiveServiceJmsSoap12Endpoint&quot; binding=&quot;ns:MessageReceiveServiceSoap12Binding&quot;&gt;
                        &lt;soap12:address location=&quot;jms:/MessageReceiveService?transport.jms.DestinationType=queue&amp;amp;transport.jms.ContentTypeProperty=Content-Type&amp;amp;java.naming.provider.url=conf/jndi.properties&amp;amp;java.naming.factory.initial=org.wso2.andes.jndi.PropertiesFileInitialContextFactory&amp;amp;transport.jms.ConnectionFactoryType=queue&amp;amp;transport.jms.ConnectionFactoryJNDIName=QueueConnectionFactory&quot;/&gt;
                    &lt;/wsdl:port&gt;
                &lt;/wsdl:service&gt;
            &lt;/wsdl:definitions&gt;
        </pre>

         <h2>Axi2 Configurations</h2>
        <p>axi2.xml file, which configures the axis2 server on which above service is hosted, should be enabled with JMS
            transport.</p>
        <pre xml:space="preserve">
            &lt;transportReceiver name=&quot;jms&quot; class=&quot;org.apache.axis2.transport.jms.JMSListener&quot;&gt;
                &lt;parameter name=&quot;default&quot; locked=&quot;false&quot;&gt;
                &lt;parameter name=&quot;java.naming.factory.initial&quot; locked=&quot;false&quot;&gt;org.wso2.andes.jndi.PropertiesFileInitialContextFactory&lt;/parameter&gt;
                &lt;parameter name=&quot;java.naming.provider.url&quot; locked=&quot;false&quot;&gt;conf/jndi.properties&lt;/parameter&gt;
                &lt;parameter name=&quot;transport.jms.ConnectionFactoryJNDIName&quot; locked=&quot;false&quot;&gt;QueueConnectionFactory&lt;/parameter&gt;
                &lt;parameter name=&quot;transport.jms.ConnectionFactoryType&quot; locked=&quot;false&quot;&gt;queue&lt;/parameter&gt;
                &lt;/parameter&gt;
            &lt;/transportReceiver&gt;
        </pre>
        <br></br>
        <pre xml:space="preserve">
            <transportSender name="jms" class="org.apache.axis2.transport.jms.JMSSender"/>
        </pre>

        <h2>Message Broker Bindings</h2>
        <p>conf/jndi.properties file is having all JMS bindings (Queue/QueueConnectionFactory) mentioned above.</p>

        <pre xml:space="preserve">

            connectionfactory.QueueConnectionFactory=amqp://admin:admin@clientid/carbon?brokerlist='tcp://localhost:5672'
            queue.MessageReceiveService=MessageReceiveService
        </pre>
        <p>Note that WSO2 Message Broker should be running at localhost port 5672 as per this sample.</p>
        <h2>Start Axis2 Server</h2>
        <p>Axis2 server is started with above configurations, hosting the above MessageReceiveService service.</p>
        <pre xml:space="preserve">

            private AxisServer axisServer;
            public void start(){
            try {
                ConfigurationContext configurationContext =
                ConfigurationContextFactory.createConfigurationContextFromFileSystem(null,"conf/axis2.xml");
                this.axisServer = new AxisServer();
                this.axisServer.setConfigurationContext(configurationContext);
                this.axisServer.deployService(MessageReceiveService.class.getName());
                try {
                Thread.sleep(2000);
                } catch (InterruptedException e) {
                }
                } catch (AxisFault axisFault) {
                axisFault.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
            }
        </pre>

        <h2>Send A Message To MessageReceiveService Service</h2>
        <p>Now using axis2_client.xml as the config file a ConfigurationContext can be created and a message can be sent
            to the service. Note that fist "in-only" message is sent and then "in-out" message is sent. Client stub is
            generated from the above WSDL using WSDL-To-Java tool (when complied using build.xml at &amp; MB_HOME &amp;
            /Samples/jmstransport using ant this will be done).
        </p>
        <p>Using WSO2 MB management console you can see how  MessageReceiveService queue is created. See Message Broker
            Queues - User Guide for more information.</p>
        <pre xml:space="preserve">

            public void sendMessage(){
            try {

            ConfigurationContext configurationContext =
            ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, "conf/axis2_client.xml");
            MessageReceiveServiceStub stub = new MessageReceiveServiceStub(configurationContext,"http://localhost:8080/axis2/services/MessageReceiveService.MessageReceiveServiceHttpSoap11Endpoint/");
            //first send the in only message
            stub.receive("Test message to receive ");
            // inout message
            String response = stub.echo("Test message to echo");
            System.out.println("Response ==> " + response);

            try {
            Thread.sleep(10000);
            } catch (InterruptedException e) {
            e.printStackTrace();
            }
            } catch (AxisFault axisFault) {
            axisFault.printStackTrace();
            } catch (java.rmi.RemoteException e) {
            e.printStackTrace();
            }
            }
        </pre>
        <p>
            The complete sample code demonstrating the scenario will be as follows.
        </p>
        <pre xml:space="preserve">
            /*
*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*  WSO2 Inc. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

import org.apache.axis2.AxisFault;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.ConfigurationContextFactory;
import org.apache.axis2.engine.AxisServer;
import org.sample.transport.stub.MessageReceiveServiceStub;

public class JMSTransportClient {
        private AxisServer axisServer;
        public void start(){
            try {
                ConfigurationContext configurationContext =
                        ConfigurationContextFactory.createConfigurationContextFromFileSystem(null,"conf/axis2.xml");
                this.axisServer = new AxisServer();
                this.axisServer.setConfigurationContext(configurationContext);
                this.axisServer.deployService(MessageReceiveService.class.getName());
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                }
            } catch (AxisFault axisFault) {
                axisFault.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public void stop(){
            try {
                this.axisServer.stop();
            } catch (AxisFault axisFault) {
                axisFault.printStackTrace();
            }
        }
        public void sendMessage(){
            try {

                ConfigurationContext configurationContext =
                        ConfigurationContextFactory.createConfigurationContextFromFileSystem(null, "conf/axis2_client.xml");
                MessageReceiveServiceStub stub = new                    MessageReceiveServiceStub(configurationContext,"http://localhost:8080/axis2/services/MessageReceiveService.MessageReceiveServiceHttpSoap11Endpoint/");
                //first send the in only message
                stub.receive("Test message to receive ");
                // inout message
                String response = stub.echo("Test message to echo");
                System.out.println("Response ==> " + response);

                try {
                    Thread.sleep(10000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } catch (AxisFault axisFault) {
                axisFault.printStackTrace();
            } catch (java.rmi.RemoteException e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {

            JMSTransportClient jmsTransportClient = new JMSTransportClient();
            jmsTransportClient.start();
            jmsTransportClient.sendMessage();
            jmsTransportClient.stop();
        }

    }
        </pre>
    </body>
</html>
